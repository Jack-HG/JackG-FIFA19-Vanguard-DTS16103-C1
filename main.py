# -*- coding: utf-8 -*-
"""
Created on Fri Sep 18 17:04:34 2020

@author: Jack Goggin
"""

import pandas as pd
# imports the pandas library
# assigns it to the word 'pd', as this is shorter it saves time because we don't have to write 'pandas' each time
# we use this module, instead just write 'pd'

def intro():
    # defines the function for the introduction of the user
    # decompostion - break down big problems into smaller problems. Smaller problems easier to solve, re-construct to solve big problem
    # good to use decomposition, as makes code more readable, easier to troubleshoot and the function can be re-used elsewhere
    
    print("\n\nHello and welcome to the FIFA 19 vanguard - a database of players in FIFA 19")
    print("Search for your favourite players and see their statisitcs on the 2019 edition of the game")
    print("But that's not all! With this technology you can compare players stats - shooting, defending, potential in career mode, height; compare it all!")
    print("Search for that perfect player to make your team click? Search via specific parameters to find that player! ")
    print("E.g. Over 6ft, more than 80 pace, more than 84 defending, high defensive work rate. Find the players that match your needs! ")
    print("\n\nThere are 92 different types of statistic stored on each player: \n\n")
    # display an introduction message to the user - explains what the application can do
    
    df = pd.read_csv('fifa_cleaned.csv')
    # 'df' is short for data frame. A dataframe, part of the pandas library, is a "2D tabular data structure"
    # "data is aligned in a tabular fashion in rows and columns"..."three principal components, the data, rows and columns"
    # https://www.geeksforgeeks.org/python-pandas-dataframe/
    # this line read the comma-seperated value (csv) file into a data frame, via the file name 'fifa_claned.csv'
    # this is saved in the same location as the file, otherwise we would have to specify the filepath
    # by using a dataframe, the information is more readable and easier to parse
    
    column_headers = df.columns.tolist()
    # df.columns gets the header of each column, this is stored as a 'numpy.ndarray'
    # .tolist() converts the columns from type 'numpy.ndarray' to a list type, making it easier to read and parse
        
    for counter, value in enumerate(column_headers, start = 1):
        print(counter, ' - ', value)
    # enumrate function adds a counter to the variable. So this would add a counter to each header in the table
    # the for loop iterates through the list generated by the enumerate function
    # the enumerate function splits the list into two values - a number (counter), and the header name
    # the for loop assings the variable name counter to the number and the value variable to the header name
    # then for each line as it loops, it prints the counter variable, followed by a string ' - ', then the value variable
    # which displays the "counter ' - ' header name" or "1 - id"
    
intro()
# calls/executes the intro() function