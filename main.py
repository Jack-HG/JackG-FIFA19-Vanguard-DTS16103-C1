# -*- coding: utf-8 -*-
"""
Created on Fri Sep 18 17:04:34 2020

@author: Jack Goggin
"""

import pandas as pd
# imports the pandas library
# assigns it to the word 'pd', as this is shorter it saves time because we don't have to write 'pandas' each time
# we use this module, instead just write 'pd'

def intro():
    # defines the function for the introduction of the user
    # decompostion - break down big problems into smaller problems. Smaller problems easier to solve, re-construct to solve big problem
    # good to use decomposition, as makes code more readable, easier to troubleshoot and the function can be re-used elsewhere
    
    print("\n\nHello and welcome to the FIFA 19 vanguard - a database of players in FIFA 19")
    print("Search for your favourite players and see their statisitcs on the 2019 edition of the game")
    print("But that's not all! With this technology you can compare players stats - shooting, defending, potential in career mode, height; compare it all!")
    print("Search for that perfect player to make your team click? Search via specific parameters to find that player! ")
    print("E.g. Over 6ft, more than 80 pace, more than 84 defending, high defensive work rate. Find the players that match your needs! ")
    print("\n\nThere are 92 different types of statistic stored on each player: \n\n")
    # display an introduction message to the user - explains what the application can do
    
    df = pd.read_csv('fifa_cleaned.csv')
    # 'df' is short for data frame. A dataframe, part of the pandas library, is a "2D tabular data structure"
    # "data is aligned in a tabular fashion in rows and columns"..."three principal components, the data, rows and columns"
    # https://www.geeksforgeeks.org/python-pandas-dataframe/
    # this line read the comma-seperated value (csv) file into a data frame, via the file name 'fifa_claned.csv'
    # this is saved in the same location as the file, otherwise we would have to specify the filepath
    # by using a dataframe, the information is more readable and easier to parse
    
    column_headers = df.columns.tolist()
    # df.columns gets the header of each column, this is stored as a 'numpy.ndarray'
    # .tolist() converts the columns from type 'numpy.ndarray' to a list type, making it easier to read and parse
        
    for counter, value in enumerate(column_headers, start = 1):
        print(counter, ' - ', value)
    # enumrate function adds a counter to the variable. So this would add a counter to each header in the table
    # the for loop iterates through the list generated by the enumerate function
    # the enumerate function splits the list into two values - a number (counter), and the header name
    # the for loop assings the variable name counter to the number and the value variable to the header name
    # then for each line as it loops, it prints the counter variable, followed by a string ' - ', then the value variable
    # which displays the "counter ' - ' header name" or "1 - id"
    

def search_database():
    # this will be a fucntion that allows users to search for players in a database
    # this is needed as a player may search for Wilson, as in Callum Wilson, but there are multiple players with the last name Wilson
    # this will return each player with 'Wilson' in there name, allowing them to specify the correct player
    
    df = pd.read_csv('fifa_cleaned.csv')
    player_data = df['name']
    # converts data frame into a series that includes just the column with header 'name'
    print("Here you can search for stats belonging to a certain player")
    print("First we must make sure you are searching for the correct player")
    # explains what is needed before we search for the stats
    
    desired_player = (input(str("Input the player you want to search for: "))).capitalize()
    # gets a string input from the user to determine the player they want to search for
    # capitalize() is a function that capitalises the first letter, as each name in the dadtabase has a capital first letter, so this is needed to match properly
    list_of_players_found = []
    # defines a list of the players that will be found on the upcoming search on the users input
    for index, player_name in player_data.items():
    # iterates through the series, assigning the index the variable index and the data in the column 'name' to the variable 'player_name'
        if desired_player in player_name:
            # if statement, if the string that the user entered is contained in one of the values in the 'name' column
            # rather than use the "player_name = value", this function will check if the string is contained within
            # meaning players with similiar names, but no exact to the user input, can be found
            list_of_players_found.append(player_name)
            # if a name is found, it is added onto the list defined above
            # append adds to end, rather than overwriting

    if len(list_of_players_found) != 0:
        # if statement checks that list is not empty
        # a list of length 0 would mean it is empty, as there are no entries. A empty list would mean no players found
        print("\nPlayers found: \n")
        print('\n'.join(list_of_players_found))
        # this join() function, displays the list without the brackets, but seperates them but '\n' which leaves a line
        # makes it more readable and user friendly
    else:
        print("\nThis name was not found in the database")
        # prints no players found as the list length was zero
        
"""intro()"""
# calls/executes the intro() function
""""search_database()"""
# calls/executes the search_database() function